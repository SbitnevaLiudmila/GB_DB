 /*1. Пусть в таблице users поля created_at и updated_at оказались незаполненными. 
  Заполните их текущими датой и временем.*/
  
 CREATE DATABASE lesson5;
 USE lesson5;
 SELECT DATABASE();
 
 DROP TABLE IF EXISTS users;
 CREATE TABLE users (
   id SERIAL PRIMARY KEY,
   name VARCHAR(255) COMMENT 'Имя покупателя',
   birthday_at DATE COMMENT 'Дата рождения',
   created_at DATETIME,
   updated_at DATETIME
 ) COMMENT = 'Покупатели';
 
 INSERT INTO users (name, birthday_at) VALUES
   ('Геннадий', '1990-10-05'),
   ('Наталья', '1984-11-12'),
   ('Александр', '1985-05-20'),
   ('Сергей', '1988-02-14'),
   ('Иван', '1998-01-12'),
   ('Мария', '1992-08-29');
  
 UPDATE users SET created_at = NOW(), updated_at = NOW() ;
 
 /*2.Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы
  типом VARCHAR и в них долгое время помещались значения в формате "20.10.2017 8:10". 
  Необходимо преобразовать поля к типу DATETIME, сохранив введеные ранее значения.*/
 SHOW TABLES;
 
 DROP TABLE IF EXISTS users;
 CREATE TABLE users (
   id SERIAL PRIMARY KEY,
   name VARCHAR(255),
   birthday_at DATE,
   created_at VARCHAR(155),
   updated_at VARCHAR(155)
 );
 
 
 INSERT INTO users (name, birthday_at, created_at, updated_at) VALUES
   ('Геннадий', '1990-10-05', '20.10.2017 8:10', '20.10.2017 8:10'),
   ('Наталья', '1984-11-12', '20.10.2017 8:10', '20.10.2017 8:10'),
   ('Александр', '1985-05-20', '20.10.2017 8:10', '20.10.2017 8:10'),
   ('Сергей', '1988-02-14', '20.10.2017 8:10', '20.10.2017 8:10'),
   ('Иван', '1998-01-12', '20.10.2017 8:10', '20.10.2017 8:10'),
   ('Мария', '1992-08-29', '20.10.2017 8:10', '20.10.2017 8:10');
  
 SELECT * FROM users;
 /*сначала проверим, приведем существующие данный к формату дата*/
 
 SELECT STR_TO_DATE(created_at, '%d.%m.%Y %k:%i') FROM users;
 
 /*теперь можем update*/
 
 UPDATE users SET created_at = STR_TO_DATE(created_at, '%d.%m.%Y %k:%i'), updated_at = STR_TO_DATE(updated_at, '%d.%m.%Y %k:%i');
 
 /* изменим тип данных столбцов*/
 DESC users;
 
 ALTER TABLE users CHANGE created_at created_at DATETIME DEFAULT CURRENT_TIMESTAMP;
 ALTER TABLE users CHANGE updated_at updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;
 
 
 /*3.В таблице складских запасов storehouses_products в поле value могут встречаться 
 самые разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы. 
 Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения значения value. 
 Однако, нулевые запасы должны выводиться в конце, после всех записей.*/
 
 DROP TABLE IF EXISTS storehouses_products;
 CREATE TABLE storehouses_products (
   id SERIAL PRIMARY KEY,
   storehouse_id INT UNSIGNED,
   product_id INT UNSIGNED,
   value INT UNSIGNED COMMENT 'Запас товарной позиции на складе',
   created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
   updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP 
 ) COMMENT = 'Запасы на складе';
 
 INSERT INTO storehouses_products VALUES (NULL,1, 5, 0, DEFAULT, DEFAULT);
 INSERT INTO storehouses_products VALUES (NULL,1, 5, 15, DEFAULT, DEFAULT);
 INSERT INTO storehouses_products VALUES (NULL,1, 4, 0, DEFAULT, DEFAULT);
 INSERT INTO storehouses_products VALUES (NULL,2, 4, 10, DEFAULT, DEFAULT);
 INSERT INTO storehouses_products VALUES (NULL,2, 5, 8, DEFAULT, DEFAULT);
 INSERT INTO storehouses_products VALUES (NULL,2, 5, 0, DEFAULT, DEFAULT);
 
 SELECT * FROM storehouses_products
        ORDER BY CASE WHEN value = 0 THEN 1000000000 ELSE value END;
 --или
 
 SELECT * FROM storehouses_products ORDER BY IF(value > 0, 0, 1),value;
 
 
 /*4.(по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. 
 Месяцы заданы в виде списка английских названий ('may', 'august')*/
 
 DROP TABLE IF EXISTS users;
 CREATE TABLE users (
   id SERIAL PRIMARY KEY,
   name VARCHAR(255),
   birthday_at DATE,
   created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
   updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
 );
 
 
 INSERT INTO users (name, birthday_at) VALUES
   ('Геннадий', '1990-10-05'),
   ('Наталья', '1984-11-12'),
   ('Александр', '1985-05-20'),
   ('Сергей', '1988-02-14'),
   ('Иван', '1998-01-12'),
   ('Мария', '1992-08-29');
  
 SELECT * FROM users;
 
 SELECT name, DATE_FORMAT(birthday_at, '%M') FROM users;
 
 SELECT * FROM users WHERE DATE_FORMAT(birthday_at, '%M') = 'may' OR DATE_FORMAT(birthday_at, '%M') = 'august';
 
 -- или второй вариант
 SELECT name FROM users WHERE DATE_FORMAT(birthday_at, '%M') IN ('may', 'august');
 
 /*5.(по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. 
 SELECT * FROM catalogs WHERE id IN (5, 1, 2); 
 Отсортируйте записи в порядке, заданном в списке IN.*/
 
 DROP TABLE IF EXISTS catalogs;
 CREATE TABLE catalogs (
   id SERIAL PRIMARY KEY,
   name VARCHAR(255) COMMENT 'Название раздела',
   UNIQUE unique_name(name(10))
 ) COMMENT = 'Разделы интернет-магазина';
 
 INSERT INTO catalogs VALUES
   (NULL, 'Процессоры'),
   (NULL, 'Материнские платы'),
   (NULL, 'Видеокарты'),
   (NULL, 'Жесткие диски'),
   (NULL, 'Оперативная память');
  
  SELECT * FROM catalogs;
 
 SELECT * FROM catalogs WHERE id IN (5,1,2) ORDER BY FIELD(id,5,1,2);
 
 
 /*Практическое задание теме “Агрегация данных”
 1. Подсчитайте средний возраст пользователей в таблице users*/
 
 SELECT * FROM users;
 
 SELECT name, TIMESTAMPDIFF(YEAR, birthday_at, NOW()) FROM users;
 
 SELECT FLOOR(AVG(TIMESTAMPDIFF(YEAR, birthday_at, NOW()))) AS age FROM users;
 
 
 -- 2. Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. 
 -- Следует учесть, что необходимы дни недели текущего года, а не года рождения.
 
 
 INSERT INTO users (name, birthday_at) VALUES
   ('Геннадий', '1990-10-05'),
   ('Наталья', '1984-11-12'),
   ('Александр', '1985-05-20'),
   ('Сергей', '1988-02-14'),
   ('Иван', '1998-01-12'),
   ('Мария', '1992-08-29');
  
  INSERT INTO users (name, birthday_at) VALUES
   ('Александр', '1985-05-20'),
   ('Сергей', '1988-02-14'),
   ('Иван', '1998-01-12');
 
 SELECT DATE_FORMAT(DATE(CONCAT_WS('-', YEAR(NOW()), MONTH(birthday_at), DAY(birthday_at))), '%W') AS day FROM users GROUP BY day;
 
 -- считаем количество в каждой группе
 
 SELECT DATE_FORMAT(DATE(CONCAT_WS('-', YEAR(NOW()), MONTH(birthday_at), DAY(birthday_at))), '%W') AS day, COUNT(*) AS total FROM users GROUP BY day;
 
 
 
 -- 3. (по желанию) Подсчитайте произведение чисел в столбце таблицы
 DROP TABLE IF EXISTS tbl;
 
 CREATE TABLE tbl (
   id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
   value INT
 );
 
 INSERT INTO tbl VALUES (NULL, 10);
 INSERT INTO tbl VALUES (NULL, 2);
 INSERT INTO tbl VALUES (NULL, 5);
 INSERT INTO tbl VALUES (NULL, 6);
 INSERT INTO tbl VALUES (NULL, 7);
 
 SELECT * FROM tbl;
 
 SELECT ROUND(EXP(SUM(LN(value)))) AS multiplication FROM tbl;
 
